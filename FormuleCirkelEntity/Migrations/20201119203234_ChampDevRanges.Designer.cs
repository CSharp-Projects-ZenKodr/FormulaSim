// <auto-generated />
using System;
using FormuleCirkelEntity.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FormuleCirkelEntity.Migrations
{
    [DbContext(typeof(FormulaContext))]
    [Migration("20201119203234_ChampDevRanges")]
    partial class ChampDevRanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormuleCirkelEntity.Models.Championship", b =>
                {
                    b.Property<int>("ChampionshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveChampionship")
                        .HasColumnType("bit");

                    b.Property<string>("AgeDevRanges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampionshipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillDevRanges")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChampionshipId");

                    b.ToTable("Championships");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Archived");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.DriverResult", b =>
                {
                    b.Property<int>("DriverResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChassisRacePace")
                        .HasColumnType("int");

                    b.Property<int>("ChassisRelMod")
                        .HasColumnType("int");

                    b.Property<int>("DNFCause")
                        .HasColumnType("int");

                    b.Property<int>("DSQCause")
                        .HasColumnType("int");

                    b.Property<int>("DriverRacePace")
                        .HasColumnType("int");

                    b.Property<int>("DriverRelMod")
                        .HasColumnType("int");

                    b.Property<int>("EngineRacePace")
                        .HasColumnType("int");

                    b.Property<int>("Grid")
                        .HasColumnType("int");

                    b.Property<int>("MaxRNG")
                        .HasColumnType("int");

                    b.Property<int>("MinRNG")
                        .HasColumnType("int");

                    b.Property<string>("PenaltyReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QualyMod")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonDriverId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StintResults")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverResultId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SeasonDriverId");

                    b.ToTable("DriverResults");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Archived");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Qualification", b =>
                {
                    b.Property<int>("QualyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accent")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PenaltyPosition")
                        .HasColumnType("float");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualyId");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceState")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("StintProgress")
                        .HasColumnType("int");

                    b.Property<string>("Stints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<int>("Weather")
                        .HasColumnType("int");

                    b.HasKey("RaceId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TrackId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChampionshipId")
                        .HasColumnType("int");

                    b.Property<string>("PointsPerPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolePoints")
                        .HasColumnType("int");

                    b.Property<int>("QualificationRNG")
                        .HasColumnType("int");

                    b.Property<int>("QualificationRemainingDriversQ2")
                        .HasColumnType("int");

                    b.Property<int>("QualificationRemainingDriversQ3")
                        .HasColumnType("int");

                    b.Property<int>("QualyBonus")
                        .HasColumnType("int");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeasonStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("SeasonId");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.SeasonDriver", b =>
                {
                    b.Property<int>("SeasonDriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("DriverStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Dropped")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("Tires")
                        .HasColumnType("int");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeasonDriverId");

                    b.HasIndex("DriverId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonTeamId");

                    b.ToTable("SeasonDrivers");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.SeasonTeam", b =>
                {
                    b.Property<int>("SeasonTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Acceleration")
                        .HasColumnType("int");

                    b.Property<string>("Accent")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<int>("Chassis")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("Handling")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Principal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Topspeed")
                        .HasColumnType("int");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeasonTeamId");

                    b.HasIndex("EngineId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("SeasonTeams");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Archived");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LengthKM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specification")
                        .HasColumnType("int");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Archived");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Trait", b =>
                {
                    b.Property<int>("TraitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int?>("ChassisRacePace")
                        .HasColumnType("int");

                    b.Property<int?>("ChassisReliability")
                        .HasColumnType("int");

                    b.Property<int?>("DriverRacePace")
                        .HasColumnType("int");

                    b.Property<int?>("DriverReliability")
                        .HasColumnType("int");

                    b.Property<int?>("EngineRacePace")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumRNG")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumRNG")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QualyPace")
                        .HasColumnType("int");

                    b.Property<string>("TraitDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TraitGroup")
                        .HasColumnType("int");

                    b.HasKey("TraitId");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.DriverResult", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Race", "Race")
                        .WithMany("DriverResults")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormuleCirkelEntity.Models.SeasonDriver", "SeasonDriver")
                        .WithMany("DriverResults")
                        .HasForeignKey("SeasonDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Race", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormuleCirkelEntity.Models.Track", "Track")
                        .WithMany("Races")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Season", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Championship", "Championship")
                        .WithMany("Seasons")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.SeasonDriver", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Driver", "Driver")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormuleCirkelEntity.Models.Season", "Season")
                        .WithMany("Drivers")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormuleCirkelEntity.Models.SeasonTeam", "SeasonTeam")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("SeasonTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.SeasonTeam", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormuleCirkelEntity.Models.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormuleCirkelEntity.Models.Team", "Team")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
