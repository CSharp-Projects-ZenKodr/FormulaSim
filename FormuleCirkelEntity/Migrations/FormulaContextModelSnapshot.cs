// <auto-generated />
using FormuleCirkelEntity.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FormuleCirkelEntity.Migrations
{
    [DbContext(typeof(FormulaContext))]
    partial class FormulaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormuleCirkelEntity.Models.DriverDetails", b =>
                {
                    b.Property<int>("DriverDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrivingStyle");

                    b.Property<int>("SeasonId");

                    b.Property<int>("Skill");

                    b.Property<int>("Tires");

                    b.HasKey("DriverDetailId");

                    b.HasIndex("SeasonId");

                    b.ToTable("DriverDetails");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.DriverStandings", b =>
                {
                    b.Property<int>("DriverStandingsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Points");

                    b.Property<int>("Position");

                    b.HasKey("DriverStandingsId");

                    b.ToTable("DriverStandings");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Drivers", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<int>("DriverDetailId");

                    b.Property<int>("DriverNumber");

                    b.Property<string>("Name");

                    b.Property<int>("QualyId");

                    b.Property<int>("ResultId");

                    b.HasKey("DriverId");

                    b.HasIndex("DriverDetailId");

                    b.HasIndex("QualyId");

                    b.HasIndex("ResultId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.EngineDetails", b =>
                {
                    b.Property<int>("EngineDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Power");

                    b.Property<int>("SeasonId");

                    b.HasKey("EngineDetailId");

                    b.HasIndex("SeasonId");

                    b.ToTable("EngineDetails");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Engines", b =>
                {
                    b.Property<int>("EngineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EngineDetailId");

                    b.Property<string>("Name");

                    b.Property<int>("Power");

                    b.Property<int>("TeamDetailId");

                    b.HasKey("EngineId");

                    b.HasIndex("EngineDetailId");

                    b.HasIndex("TeamDetailId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Qualification", b =>
                {
                    b.Property<int>("QualyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Position");

                    b.HasKey("QualyId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Races", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DriverStandingsId");

                    b.Property<string>("Name");

                    b.Property<int>("QualyId");

                    b.Property<int>("ResultId");

                    b.Property<int>("Round");

                    b.Property<int>("TeamStandingsId");

                    b.HasKey("RaceId");

                    b.HasIndex("DriverStandingsId");

                    b.HasIndex("QualyId");

                    b.HasIndex("ResultId");

                    b.HasIndex("TeamStandingsId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Results", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Grid");

                    b.Property<int>("Points");

                    b.Property<int>("Position");

                    b.HasKey("ResultId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Seasons", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RaceId");

                    b.HasKey("SeasonId");

                    b.HasIndex("RaceId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResultId");

                    b.Property<string>("StatusText");

                    b.HasKey("StatusId");

                    b.HasIndex("ResultId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.TeamDetails", b =>
                {
                    b.Property<int>("TeamDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Chassis");

                    b.Property<int>("Reliability");

                    b.Property<int>("SeasonId");

                    b.Property<int>("Specification");

                    b.HasKey("TeamDetailId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TeamDetails");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.TeamStandings", b =>
                {
                    b.Property<int>("TeamStandingsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Points");

                    b.Property<int>("Position");

                    b.HasKey("TeamStandingsId");

                    b.ToTable("TeamStandings");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Teams", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("QualyId");

                    b.Property<int>("ResultId");

                    b.Property<int>("TeamDetailId");

                    b.HasKey("TeamId");

                    b.HasIndex("QualyId");

                    b.HasIndex("ResultId");

                    b.HasIndex("TeamDetailId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Tracks", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DNFodds");

                    b.Property<int>("RNGodds");

                    b.Property<int>("RaceId");

                    b.Property<int>("Specification");

                    b.HasKey("TrackId");

                    b.HasIndex("RaceId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.DriverDetails", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Seasons", "Seasons")
                        .WithMany("DriverDetails")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Drivers", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.DriverDetails", "DriverDetails")
                        .WithMany("Drivers")
                        .HasForeignKey("DriverDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.Qualification", "Qualification")
                        .WithMany("Drivers")
                        .HasForeignKey("QualyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.Results", "Results")
                        .WithMany("Drivers")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.EngineDetails", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Seasons", "Seasons")
                        .WithMany("EngineDetails")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Engines", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.EngineDetails", "EngineDetails")
                        .WithMany("Engines")
                        .HasForeignKey("EngineDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.TeamDetails", "TeamDetails")
                        .WithMany("Engines")
                        .HasForeignKey("TeamDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Races", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.DriverStandings", "DriverStandings")
                        .WithMany("Races")
                        .HasForeignKey("DriverStandingsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.Qualification", "Qualification")
                        .WithMany("Races")
                        .HasForeignKey("QualyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.Results", "Results")
                        .WithMany("Races")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.TeamStandings", "TeamStandings")
                        .WithMany("Races")
                        .HasForeignKey("TeamStandingsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Seasons", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Races", "Races")
                        .WithMany("Seasons")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Status", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Results", "Results")
                        .WithMany("Statuses")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.TeamDetails", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Seasons", "Seasons")
                        .WithMany("TeamDetails")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Teams", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Qualification", "Qualification")
                        .WithMany("Teams")
                        .HasForeignKey("QualyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.Results", "Results")
                        .WithMany("Teams")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormuleCirkelEntity.Models.TeamDetails", "TeamDetails")
                        .WithMany("Teams")
                        .HasForeignKey("TeamDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormuleCirkelEntity.Models.Tracks", b =>
                {
                    b.HasOne("FormuleCirkelEntity.Models.Races", "Races")
                        .WithMany("Tracks")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
