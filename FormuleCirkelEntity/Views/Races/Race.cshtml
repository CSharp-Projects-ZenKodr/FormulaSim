@model Race
@{
    ViewData["Title"] = "Race";
    int maxPos = Model.Season.PointsPerPosition.Keys.Max();
}

@if (Model.Season.State == SeasonState.Progress)
{
    <div class="table-header-container">
        @if (Model.RaceState == RaceState.Race)
        {
            <a class="btn btn-dark" onclick="advanceStint()">Next stint</a>

            <form asp-action="FinishRace" asp-route-seasonId="@(Model.SeasonId)" asp-route-raceId="@(Model.RaceId)" id="finish">
                <input type="submit" value="Finish" class="btn btn-dark" />
            </form>
        }
    </div>
}

<section id="graphic" class="row my-1">
    <h1>@Model.Track.Name</h1>
    <i id="weather" class="ml-auto fas"></i>
    <table id="results" class="table table-sm">
        <thead>
            <tr>
                <th data-field="position">Pos.</th>
                <th>Nr.</th>
                <th>Name</th>
                <th>Team</th>
                <th>Grid</th>
                @foreach (var stint in Model.Stints)
                {
                    <th data-field="stintResultHeader-@stint.Key">
                        @stint.Key
                    </th>
                }
                <th data-field="pointsTotal">Score</th>
                <th></th>
                <th>Pts.</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var driverResult in Model.DriverResults.OrderBy(d => d.Position))
            {
                int gridChange = (driverResult.Grid - driverResult.Position);
                <tr data-obj-id="@driverResult.SeasonDriverId">
                    <td data-field="position">@driverResult.Position</td>
                    <td data-field="driverNumber"><span class="badge" style="background-color:@(driverResult.SeasonDriver.SeasonTeam.Team.Colour);color:@(driverResult.SeasonDriver.SeasonTeam.Team.Accent);font-size:1rem;">@driverResult.SeasonDriver.Driver.DriverNumber</span></td>
                    <td data-field="driverName"><span class="result-click" style="cursor:pointer;">@driverResult.SeasonDriver.Driver.Name</span></td>
                    <td data-field="teamName"><span class="badge" style="background-color:@(driverResult.SeasonDriver.SeasonTeam.Team.Colour);color:@(driverResult.SeasonDriver.SeasonTeam.Team.Accent);font-size:1rem;">@driverResult.SeasonDriver.SeasonTeam.Team.Abbreviation</span></td>
                    <td data-field="startGrid">
                        @if (gridChange > 0)
                        {
                            <i class='fas fa-caret-up' style='color:green;'></i><span class='badge nofullwidth'>@gridChange</span>
                        }
                        else if (gridChange < 0)
                        {
                            <i class='fas fa-caret-down' style='color:red;'></i><span class='badge nofullwidth'>@(gridChange * -1)</span>
                        }
                        else
                        {
                            <i class='fas fa-minus' style='color:yellow;font-size:0.7rem;'></i><span class='badge nofullwidth'>@gridChange</span>
                        }
                    </td>
                    @foreach (var stint in Model.Stints)
                    {
                        var stintResult = driverResult.StintResults.SingleOrDefault(res => res.Key == stint.Key);
                        if (stintResult.Equals(default(KeyValuePair<int, int?>)))
                        {
                            stintResult = new KeyValuePair<int, int?>(stint.Key, null);
                        }
                        <td data-field="stintResult-@stintResult.Key">@(stintResult.Value == null ? "-" : stintResult.Value.ToString())</td>
                    }
                    @if (driverResult.Status == Status.DNF)
                    {
                        <td data-field="pointsTotal"><span class="badge badge-danger nofullwidth">DNF</span></td>
                        <td data-field="dnfCause"><i>@driverResult.DNFCause</i></td>

                    }
                    else if (driverResult.Status == Status.DSQ)
                    {
                        <td data-field="pointsTotal"><span class="badge badge-dsq nofullwidth">DSQ</span></td>
                        <td data-field="dnfCause"><b>@driverResult.DSQCause</b></td>
                    }
                    else
                    {
                        <td data-field="pointsTotal">@driverResult.Points</td>
                        <td data-field="dnfCause">-</td>
                    }

                    @if (driverResult.Position > maxPos)
                    {
                        <td data-field="points"></td>
                    }
                    else
                    {
                        <td data-field="points"><span class="badge">@Model.Season.PointsPerPosition[driverResult.Position]</span></td>
                    }
                    <td data-field="abbreviation"><span class="badge alt-color nofullwidth" style="display:none;">@driverResult.SeasonDriver.Driver.Abbreviation</span></td>
                    <td data-field="fullTeamName"><span class="badge alt-color nofullwidth" style="display:none;">@driverResult.SeasonDriver.SeasonTeam.Team.Name</span></td>
                </tr>
            }
        </tbody>
    </table>
</section>

<button class="btn" onclick="takeScreenshot('#graphic', '#screenshot')"><i class="fas fa-image fa-2x"></i></button>

<div id="screenshot"></div>

<div id="resultScreenshot"></div>

<div style="overflow: hidden; height: 0;">
    <div id="formulaGraphic">
        <div id="position">0</div>
        <div id="divider"></div>

        <div id="details">
            <div id="name">Firstname Lastname</div>
            <div id="team">Racing Team</div>
        </div>

        <div id="extra">
            <div id="number">0</div>
            <div id="tla">LAS</div>
        </div>
    </div>
</div>

<!--<canvas id="raceChart"></canvas>-->

<script>
    //$(drawRaceChart);
    $(function () {
        var weatherclass = "";
        switch ("@Model.Weather") {
            case "Sunny":
                weatherclass = "fa-sun fa-2x";
                break;
            case "Overcast":
                weatherclass = "fa-cloud fa-2x";
                break;
            case "Rain":
                weatherclass = "fa-cloud-rain fa-2x";
                break;
            case "Storm":
                weatherclass = "fa-cloud-moon-rain fa-2x";
                break;
        }
        $("#weather").addClass(weatherclass);
    });

    const table = document.querySelector('#results');
    const tableBody = table.querySelector("tbody");

    function resultOrMissing(result) {
        return (result == null ? "-" : result);
    }

    var DNFCauses = [
        "None",
        "Damage",
        "Collision",
        "Accident",
        "Puncture",
        "Engine",
        "Electrics",
        "Exhaust",
        "Clutch",
        "Hydraulics",
        "Wheel",
        "Brakes"
    ];

    var DSQCauses = [
        "None",
        "Illegal",
        "Fuel",
        "Dangerous",
    ];

    function processStintResponse(res) {
        let pointsPosition = @(Json.Serialize(Model.Season.PointsPerPosition))
        res.DriverResults.forEach((driverResult, idx) => {
            let row = tableBody.querySelector("tr[data-obj-id='" + driverResult.SeasonDriverId + "']");

            if (driverResult.Status == 1) {
                row.querySelector("td[data-field='pointsTotal']").innerHTML = "<span class='badge badge-danger nofullwidth'>DNF</span>";
                row.querySelector("td[data-field='dnfCause']").innerHTML = "<i>" + DNFCauses[driverResult.DNFCause] + "</i>";
            }
            else if (driverResult.Status == 2) {
                row.querySelector("td[data-field='pointsTotal']").innerHTML = "<span class='badge badge-dsq nofullwidth'>DSQ</span>";
                row.querySelector("td[data-field='dnfCause']").innerHTML = "<b>" + DSQCauses[driverResult.DSQCause] + "</b>";
            }
            else {
                row.querySelector("td[data-field='pointsTotal']").innerText = driverResult.Points;
                row.querySelector("td[data-field='dnfCause']").innerText = "-";
            }

            row.querySelector("td[data-field='position']").innerText = driverResult.Position;
            let gridChange = (driverResult.Grid - driverResult.Position);
            if (gridChange > 0) {
                row.querySelector("td[data-field='startGrid']").innerHTML = "<i class='fas fa-caret-up' style='color:green;'></i><span class='badge nofullwidth'> " + gridChange + " </span>";
            }
            else if (gridChange < 0) {
                row.querySelector("td[data-field='startGrid']").innerHTML = "<i class='fas fa-caret-down' style='color:red;'></i><span class='badge nofullwidth'> " + (gridChange * -1) + " </span>";
            }
            else {
                row.querySelector("td[data-field='startGrid']").innerHTML = "<i class='fas fa-minus' style='color:yellow;font-size:0.7rem;'></i><span class='badge nofullwidth'> " + gridChange + " </span>";
            }
            Object.getOwnPropertyNames(driverResult.StintResults).forEach((stintKey) => {
                let stintResult = driverResult.StintResults[stintKey];
                row.querySelector("td[data-field='stintResult-" + stintKey + "']").innerText = resultOrMissing(stintResult);
            });
            if (driverResult.Position > @maxPos) {
                row.querySelector("td[data-field='points']").innerHTML = "<td data-field='points'></td>";
            } else {
                row.querySelector("td[data-field='points']").innerHTML = "<td data-field='points'><span class='badge'>" + pointsPosition[driverResult.Position] + "</span></td>";
            }
        });

        let th = table.querySelector("th[data-field='position']")
        let tableRows = tableBody.querySelectorAll("tr:nth-child(n+1)")
        Array.from(tableRows)
            .sort(tableComparer(Array.from(th.parentNode.children).indexOf(th), true))
            .forEach(tr => table.querySelector("tbody").appendChild(tr));
    }

    function advanceStint() {
        fetch("/Season/@Model.SeasonId/Races/@Model.RaceId/Advance", { method: "POST" })
            .then(response => response.json())
            .then(result => processStintResponse(result));
    }

    function comparer(index, isAscending) {
        let getCellValue = (row, idx) => row.children[idx].innerText || row.children[idx].textContent;
        let isNumber = (val) => val !== '' && !isNaN(val);
        return function (a, b) {
            let valA = getCellValue(isAscending ? a : b, index), valB = getCellValue(isAscending ? b : a, index);
            return isNumber(valA) && isNumber(valB) ? valA - valB : valA.toString().localeCompare(valB)
        }
    }

    $(".result-click").click(function () {
        var row = $(this).closest("tr");
        var position = row.find("td[data-field='position']").text();
        var name = row.find("td[data-field='driverName']").text();
        var number = row.find("td[data-field='driverNumber']").text();
        var team = row.find("td[data-field='fullTeamName']").text();
        var tla = row.find("td[data-field='abbreviation']").text();
        var colour = row.find("td[data-field='teamName']").find("span").css("background-color");
        var dnf = row.find("td[data-field='dnfCause']").text();

        if (name == $('#name').text()) {
            colour = row.find("td[data-field='teamName']").find("span").css("color");
        }

        $('#position').text(position);
        $('#name').text(name);
        $('#tla').text(tla);
        $('#team').text(team);
        $('#number').text(number);
        $('#divider').css('background-color', colour);
        $('#extra').css('color', colour);
        if (dnf !== "-") {
            $('#position').addClass('eliminated');
        } else {
            $('#position').removeClass('eliminated');
        }
        takeScreenshot("#formulaGraphic", "#resultScreenshot");
    });

    function drawRaceChart() {
        var ctx = document.getElementById('raceChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['1', '2', '3', '4', '5', '6', '7'],
                datasets: [],
                //labels: ['yobama', 'yobama', 'yobama', 'yobama'],
                //datasets: [{
                //    label: 'wew lad',
                //    fill: false,
                //    backgroundColor: 'rgb(255, 99, 132)',
                //    borderColor: 'rgb(255, 99, 132)',
                //    data: [1, 2, 2, 5]
                //}, {
                //        label: 'gay lad',
                //        fill: false,
                //        backgroundColor: 'rgb(233, 88, 111)',
                //        borderColor: 'rgb(233, 88, 132)',
                //        data: [4, 3, 1, 3]
                //}]
            },

            options: {
                responsive: true,
                title: {
                    display: true,
                    text: '@Model.Track.Name'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Stints'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Position'
                        }
                    }]
                }
            }
        });

        // foreach driver, score dataset and all that.
        var driverResults = {};
        fetch("/Season/@Model.SeasonId/Races/@Model.RaceId/getResults", { method: "POST" })
            .then(function (response) {
                return response.json();
            })
            .then(function (jsonResult) {
                driverResults = jsonResult;
            });
        console.log(driverResults);
        $(driverResults).each(function (driverKey, driverValue) {
            var driverDataset = {
                label: driverValue.seasonDriver.driver.name,
                backgroundColor: driverValue.seasonDriver.seasonTeam.team.colour,
                borderColor: driverValue.seasonDriver.seasonTeam.team.accent,
                data: [1, 2, 3, 4, 5, 6, 7],
                fill: false
            };
            chart.data.datasets.push(driverDataset);
        });
    }
</script>

<style>
    #weather {
        margin-right: 27px;
        margin-top: 15px;
    }

    #formulaGraphic {
        margin-top: 50px;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: row;
        border-bottom-right-radius: 15px;
        width: 890px;
        height: 105px;
        font-family: "Formula1 Display";
    }

        #formulaGraphic #position {
            background-color: white;
            color: black;
            width: 91px;
            height: 91px;
            margin: 7px;
            margin-right: 0;
            line-height: 91px;
            vertical-align: middle;
            text-align: center;
            font-size: 48px;
            border-bottom-right-radius: 15px;
        }

        #formulaGraphic #divider {
            background-color: #28E8EE;
            width: 9px;
            margin: 17px 12px;
        }

        #formulaGraphic #details {
            margin-top: 17px;
            margin-bottom: 17px;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

            #formulaGraphic #details #name {
                font-size: 2.5em;
                margin-top: -18px;
                font-family: "Formula1 Display";
            }

            #formulaGraphic #details #team {
                margin-top: auto;
                margin-bottom: -5px;
                font-size: 28px;
            }

        #formulaGraphic #extra {
            margin-top: 5px;
            margin-bottom: 10px;
            color: #28E8EE;
            text-align: center;
            margin-right: 30px;
        }

            #formulaGraphic #extra #number {
                font-size: 3em;
                margin-top: -10px;
            }

            #formulaGraphic #extra #tla {
                font-size: 1.5em;
            }

    #resultScreenshot {
        margin-top: 20px;
    }

        #resultScreenshot canvas:hover {
            cursor: pointer;
        }

    canvas {
        background-color: black;
    }

    .eliminated {
        background-color: #870019 !important;
        color: white !important;
    }
</style>