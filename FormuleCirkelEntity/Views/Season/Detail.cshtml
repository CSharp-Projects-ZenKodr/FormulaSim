@model SeasonDetailModel

@{
    ViewData["Title"] = "Season detail";
}

<div class="d-inline-block w-75">
    <h1>Season: @Model.Season.SeasonNumber</h1>

    <div class="flex-row justify-content-between mb-2">
        @if (Model.Season.State == SeasonState.Draft)
        {
            <div class="btn-group">
                <a asp-action="Start" asp-route-id="@Model.Season.SeasonId" class="btn">Start season!</a>
                <a asp-controller="Races" asp-action="AddTracks" asp-route-id="@Model.Season.SeasonId" class="btn">Add races</a>
                <a asp-action="AddDrivers" asp-route-id="@Model.Season.SeasonId" class="btn">Add drivers</a>
                <a asp-action="AddTeams" asp-route-id="@Model.Season.SeasonId" class="btn">Add teams</a>
                <a asp-action="Settings" asp-route-id="@Model.Season.SeasonId" class="btn"><i class="fas fa-cog"></i> Settings</a>
                <a asp-action="AddDefault" asp-route-id="@Model.Season.SeasonId" class="btn" data-toggle="tooltip" data-placement="top"
                   title="Default returns the same season setup and races as the previous season.">
                    <i class="fas fa-recycle"></i> Default
                </a>
            </div>
        }
        else
        {
            <div class="btn-group">
                <a asp-action="PenaltyList" asp-route-id="@Model.Season.SeasonId" class="btn"><i class="fas fa-wrench"></i> Parts list</a>
                <button class="btn" onclick="randomDriver()"><i class="fas fa-dice"></i> Driver trait</button>
                <button class="btn" onclick="randomTeam()"><i class="fas fa-dice"></i> Team trait</button>
            </div>
        }
        @if (Model.Season.State == SeasonState.Progress)
        {
            <a asp-action="Finish" asp-route-id="@Model.Season.SeasonId" class="btn">End season</a>
        }
    </div>

    <div class="mb-2">
        <h3 class="float-left">Drivers</h3>
        <table class="ctable fullborder fullwidth">
            <thead class="fullborder">
                <tr>
                    <th>#</th>
                    <th>Points</th>
                    <th style="width: 30px;">Nr.</th>
                    <th>Driver</th>
                    <th>Skill</th>
                    <th>Reliability</th>
                    <th>Tire</th>
                    <th>Edit</th>
                    <th>Traits</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var orderedDrivers = Model.SeasonDrivers.OrderByDescending(d => d.Points).ToList();
                    for (int pos = 0; pos < orderedDrivers.Count; pos++)
                    {
                        SeasonDriver @driver = orderedDrivers[pos];
                        SeasonTeam @team = Model.SeasonTeams.Single(st => st.SeasonTeamId == driver.SeasonTeamId);
                        <tr>
                            <td><b>@((pos + 1).ToString())</b></td>
                            <td>@driver.Points</td>
                            <td style="width: 30px;"><span class="badge badge-team" style="width:25px;background-color:@(team.Colour);color:@(team.Accent);border-color:@(team.Accent);">
                                @driver.Driver.DriverNumber</span></td>
                            <td>
                                <span class="badge badge-team fullwidth text-left font-size-default" style="background-color:@(team.Colour);color:@(team.Accent);border-color:@(team.Accent);">
                                    <span class="flag flag-@(driver.Driver.Country) flag-margin"></span>@driver.Driver.Name
                                </span>
                            </td>
                            <td>@driver.Skill</td>
                            <td>@driver.Reliability</td>
                            <td><span class="badge tire font-size-default">@(driver.Tires.ToString()[0])</span></td>
                            <td>
                                <a asp-action="UpdateDriver" asp-route-id="@Model.Season.SeasonId" asp-route-driverId="@driver.SeasonDriverId">
                                    <i class="fas fa-wrench fa-2x"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-action="DriverTraits" asp-route-id="@driver.SeasonDriverId">
                                    <i class="fas fa-yin-yang fa-2x"></i>
                                </a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @if (Model.Season.State == SeasonState.Progress)
        {
            <div class="flex-row">
                <a asp-action="DriverDev" asp-route-id="@Model.Season.SeasonId" class="btn col-6">Driver development</a>
                <a asp-action="DriverReliabilityDev" asp-route-id="@Model.Season.SeasonId" class="btn col-6">Reliability</a>
            </div>
        }
    </div>

    <div class="mb-2">
        <h3 class="float-left">Races</h3>
        <table id="races" class="ctable fullborder fullwidth">
            <thead class="fullborder">
                <tr>
                    <th data-field="location">Location</th>
                    <th data-field="name">Name</th>
                    <th data-field="round">Round</th>
                    <th data-field="specification">Spec</th>
                    <th>Race</th>
                    @if (Model.Season.State == SeasonState.Draft)
                    {
                        <th></th>
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var race in Model.Season.Races.OrderBy(r => r.Round))
                {
                <tr data-obj-id="@race.RaceId">
                    <td data-field="location" class="text-left">
                        <span class="flag flag-@(race.Track.Country) flag-margin ml-cel"></span>@race.Track.Location
                    </td>
                    <td data-field="name">@race.Name</td>
                    <td data-field="round">@race.Round</td>
                    <td data-field="specification">@race.Track.Specification</td>
                    <td>
                        <a asp-controller="Races" asp-action="RacePreview" asp-route-id="@Model.Season.SeasonId" asp-route-raceId="@race.RaceId">
                            <i class="fas @(race.RaceState == RaceState.Finished ? "fa-search" : "fa-flag-checkered") fa-2x"></i>
                        </a>
                    </td>
                    @if (Model.Season.State == SeasonState.Draft)
                    {
                        <td>
                            <a class="cursor-pointer" onclick="moveRound(@Model.Season.SeasonId, @race.RaceId, -1)"><i class="fas fa-chevron-up fa"></i></a>
                            <a class="cursor-pointer" onclick="moveRound(@Model.Season.SeasonId, @race.RaceId, 1)"><i class="fas fa-chevron-down fa"></i></a>
                        </td>
                        <td>
                            <a asp-action="RemoveRace" asp-route-id="@race.RaceId" asp-route-seasonId="@Model.Season.SeasonId">
                                <i class="fas fa-trash-alt fa-2x"></i>
                            </a>
                        </td>
                    }
                </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mb-2">
        <h3 class="float-left">Teams</h3>
        <table class="ctable fullborder fullwidth">
            <thead class="fullborder">
                <tr>
                    <th>#</th>
                    <th>Points</th>
                    <th>Team</th>
                    <th class="tcc-crew"><span>Chassis</span></th>
                    <th>Reliability</th>
                    <th class="tcc-chassis"><span>Engine</span></th>
                    <th>Power</th>
                    <th>Edit</th>
                    <th>Trait</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var orderedTeams = Model.SeasonTeams.OrderByDescending(t => t.Points).ToList();
                    for (int pos = 0; pos < orderedTeams.Count; pos++)
                    {
                        SeasonTeam team = orderedTeams[pos];
                        <tr>
                            <td><b>@((pos + 1).ToString())</b></td>
                            <td>@team.Points</td>
                            <td>
                                <span class="badge badge-team text-left fullwidth" style="background-color:@(team.Colour);color:@(team.Accent);border-color:@(team.Accent);font-size:1rem;">
                                    <span class="flag flag-@(team.Team.Country) flag-margin"></span>@team.Name
                                </span>
                            </td>
                            <td>@team.Chassis</td>
                            <td>@team.Reliability</td>
                            <td>@team.Engine.Name</td>
                            <td>@team.Engine.Power</td>
                            <td>
                                <a asp-action="UpdateTeam" asp-route-id="@Model.Season.SeasonId" asp-route-teamId="@team.SeasonTeamId">
                                    <i class="fas fa-wrench fa-2x"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-action="TeamTraits" asp-route-id="@team.SeasonTeamId">
                                    <i class="fas fa-yin-yang fa-2x"></i>
                                </a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @if (Model.Season.State == SeasonState.Progress)
        {
            <div class="flex-row">
                <a asp-action="TeamDev" asp-route-id="@Model.Season.SeasonId" class="btn col-4">Chassis development</a>
                <a asp-action="EngineDev" asp-route-id="@Model.Season.SeasonId" class="btn col-4">Engine development</a>
                <a asp-action="TeamReliabilityDev" asp-route-id="@Model.Season.SeasonId" class="btn col-4">Reliability</a>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        $(".tire:contains('H')").css("background-color", "darkorange");
        $(".tire:contains('S')").css("background-color", "darkred");
    });

    function randomDriver() {
        var drivers = @(Json.Serialize(Model.SeasonDrivers.Select(sd => sd.SeasonDriverId)));
        const randomId = drivers[Math.floor(Math.random() * drivers.length)];

        window.location.href = '/Driver/Traits/' + randomId;
    }

    function randomTeam() {
        var teams = @(Json.Serialize(Model.SeasonTeams.Select(st => st.SeasonTeamId)));
        const randomId = teams[Math.floor(Math.random() * teams.length)];

        window.location.href = '/Team/Traits/' + randomId;
    }

    function updateRaces(races) {
        const table = document.querySelector('#races');
        const tableBody = table.querySelector("tbody");

        races.forEach((race) => {
            let row = tableBody.querySelector(`tr[data-obj-id='${race.raceId}']`);
            row.querySelector("td[data-field='round']").innerHTML = race.round;
        });

        let th = table.querySelector("th[data-field='round']")
        let tableRows = tableBody.querySelectorAll("tr:nth-child(n+1)")
        Array.from(tableRows)
            .sort(tableComparer(Array.from(th.parentNode.children).indexOf(th), true))
            .forEach(tr => table.querySelector("tbody").appendChild(tr));
    }

    function handleError(errorData) {
        alert(errorData.message);
    }

    function moveRound(season, race, direction) {
        fetch(`/Season/${season}/Races/${race}/round?direction=${direction}`, { method: "POST" })
            .then(response => response.status == 200 ? Promise.resolve(response) : Promise.reject(response))
            .then(response => response.json())
            .then(data => updateRaces(data))
            .catch(err => err.json().then(err => handleError(err)));
    }
</script>