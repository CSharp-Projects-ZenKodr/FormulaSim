@model FormuleCirkelEntity.ViewModels.DriverStatsModel

    @{
        ViewData["Title"] = "Driver bio";
    }

<div id="graphic">
    <h1>Biography</h1>
    <h4>@Model.DriverName</h4>
    <hr />
    <div class="biocontainer">
        <div class="fixed">
            <div class="row m-0">
                <p><b>Teams: </b></p>
                <div class="ml-1">
                    @foreach (var team in Model.Teams)
                    {
                        <span class="badge teritary" style="font-size:0.9rem;">@team.Abbreviation</span>
                    }
                </div>
            </div>
            <dl class="inline-flex">
                <dt>
                    Starts:
                </dt>
                <dd>
                    @Model.StartCount
                </dd>
                <dt>
                    Poles:
                </dt>
                <dd>
                    @Model.PoleCount
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.PoleCount / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt>
                    Podiums:
                </dt>
                <dd>
                    @(Model.WinCount + Model.SecondCount + Model.ThirdCount)
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@(((Model.WinCount + Model.SecondCount + Model.ThirdCount) / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt>
                    Wins:
                </dt>
                <dd>
                    @Model.WinCount
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.WinCount / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt>
                    Titles:
                </dt>
                <dd>
                    @Model.WDCCount
                </dd>
                <dt>
                    DNF/DSQ:
                </dt>
                <dd>
                    @Model.DNFCount
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.DNFCount / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
            </dl>
        </div>
        <div class="flex-item">
            <p id="biography" contenteditable="true">
                @if (Model.DriverBio == null)
                {
                    <i>This driver has no bio yet!</i>
                }
                else
                {
                    @Model.DriverBio
                }
            </p>
            <button id="savebio" class="btn"><i class="far fa-save"></i></button>
        </div>
    </div>
    <div class="row justify-content-between m-0">
        <div>
            <canvas id="PosBarChart" width="400" height="250"></canvas>
        </div>
        <div>
            <canvas id="NonFinishCauses" width="250" height="250"></canvas>
        </div>
    </div>
</div>

<div class="row justify-content-between">
    <a asp-action="Index">
        <i class="fas fa-arrow-alt-circle-left fa-2x"></i>
    </a>
    <button class="btn" onclick="takeScreenshot('#graphic', '#screenshot')"><i class="fas fa-image fa-2x"></i></button>
</div>

<div id="screenshot"></div>

<script>
    $('#savebio').click(function () {
        $.ajax({
            type: "POST",
            url: "/Drivers/SaveBiography",
            data: { id: @Model.DriverId, biography: $("#biography").text() },
            dataType: "html",
            success: function () { alert("Biography saved!"); },
            error: function () { alert("Saving failed."); }
        });
    });

    $(function () {
        // Barchart for the kind of positions a driver has finished
        var ctxPosBar = document.getElementById('PosBarChart').getContext('2d');
        var posBarLabels = ['P1', 'P2', 'P3', 'Points', 'Outside', 'DNF' ];
        var posBarValues = [@Model.WinCount, @Model.SecondCount, @Model.ThirdCount, @Model.PointFinishCount, @Model.OutsideCount, @(Model.DNFCount + Model.DSQCount)];
        var posBarColours = ['gold', 'silver', '#cd7f32', 'green', 'blue', 'red'];

        var posBarChart = new Chart(ctxPosBar, {
            type: 'bar',
            data: {
                labels: posBarLabels,
                datasets: [{
                    data: posBarValues,
                    backgroundColor: posBarColours,
                }],
            },
            options: {
                scales: {
                    xAxes: [{
                        categoryPercentage: 1.0,
                        barPercentage: 1.0
                    }]
                },
                legend: {
                    display: false,
                }
            }
        });

        // Piechart to look into the sorts of DNFs / DSQs a driver has
        var ctxDnfPie = document.getElementById('NonFinishCauses').getContext('2d');
        var dnfPieLabels = ['Accident', 'Contact', 'Engine', 'Mechanical', 'DSQ'];
        var dnfPieValues = [@Model.AccidentCount, @Model.ContactCount, @Model.EngineCount, @Model.MechanicalCount, @Model.DSQCount];
        var dnfPieColours = ['purple', 'red', 'darkblue', 'grey', 'black'];

        var dnfPieChart = new Chart(ctxDnfPie, {
            type: 'pie',
            data: {
                labels: dnfPieLabels,
                datasets: [{
                    data: dnfPieValues,
                    backgroundColor: dnfPieColours,
                }],
            },
            options: {
                responsive: false
            }
        });

    });
</script>