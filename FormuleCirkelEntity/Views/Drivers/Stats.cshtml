@model FormuleCirkelEntity.ViewModels.DriverStatsModel

@{
    ViewData["Title"] = "Driver bio";
    int dnfs = (Model.DriverResults.Where(dr => dr.Status == Status.DNF).Count());
    int dsqs = (Model.DriverResults.Where(dr => dr.Status == Status.DSQ).Count());
    int finishes = (Model.DriverResults.Where(dr => dr.Status == Status.Finished).Count());
}

<div id="graphic">
    <h1>Biography</h1>
    <h4>@Model.Driver.Name</h4>
    <hr />
    <div class="biocontainer">
        <div class="fixed">
            <dl class="inline-flex">
                <dt>
                    Starts:
                </dt>
                <dd>
                    @Model.DriverResults.Count()
                </dd>
                <dt>
                    Poles:
                </dt>
                <dd>
                    @(Model.DriverResults.Where(dr => dr.Grid == 1).Count())
                </dd>
                <dt>
                    Podiums:
                </dt>
                <dd>
                    @(Model.DriverResults.Where(dr => dr.Position <= 3).Count())
                </dd>
                <dt>
                    Wins:
                </dt>
                <dd>
                    @(Model.DriverResults.Where(dr => dr.Position == 1).Count())
                </dd>
                <dt>
                    WDCs:
                </dt>
                <dd>
                    @ViewBag.championships
                </dd>
                <dt>
                    DNFs:
                </dt>
                <dd>
                    @dnfs
                </dd>
                <dt>
                    DSQ:
                </dt>
                <dd>
                    @dsqs
                </dd>
                <dt>
                    Teams:
                </dt>
                <dd class="row">
                    @foreach (var team in Model.SeasonDriver.Select(select => select.SeasonTeam.Team).Distinct())
                    {
                        <span class='badge' style='background-color:@(team.Colour);color:@(team.Accent);font-size:1rem;'>@(team.Abbreviation)</span>
                    }
                </dd>
            </dl>
        </div>
        <div class="flex-item">
            <p id="biography" contenteditable="true">
                @if (Model.Driver.Biography == null)
                {
                    <i>This driver has no bio yet!</i>
                }
                else
                {
                    @Model.Driver.Biography
                }
            </p>
            <button id="savebio" class="btn btn-dark"><i class="far fa-save"></i></button>
        </div>
    </div>
</div>

<div class="row">
    <a asp-action="Index">
        <i class="fas fa-arrow-alt-circle-left fa-2x"></i>
    </a>
    <button class="btn ml-auto" onclick="takeScreenshot()"><i class="fas fa-image fa-2x"></i></button>
</div>

<div id="screenshot"></div>

<div class="row">
    <canvas id="FinishPercentage" width="250" height="250"></canvas>
    <canvas id="StartsPerTeam" width="250" height="250"></canvas>
</div>

<script>
    $('#savebio').click(function () {
        $.ajax({
            type: "POST",
            url: "/Drivers/SaveBiography",
            data: { id: @Model.Driver.DriverId, biography: $("#biography").text() },
            dataType: "html",
            success: function () { alert("Biografie opgeslagen!"); },
            error: function () { alert("Opslaan mislukt!"); }
        });
    });

    function takeScreenshot() {
        html2canvas(document.querySelector('#graphic')).then(function (canvas) {
            $('#screenshot').empty();
            document.querySelector('#screenshot').appendChild(canvas);
        });
    }

    $(function () {
        var ctx1 = document.getElementById('FinishPercentage').getContext('2d');
        var config1 = {
            type: 'pie',
        data: {
            datasets: [{
                data: [@finishes, @dnfs, @dsqs],
                backgroundColor: ['green', 'darkred', 'black']
            }],
            labels: [
                'Finish',
                'DNF',
                'DSQ'
            ]
            },
            options: {
                responsive: false
            }
        }
        var chart1 = new Chart(ctx1, config1);
        
        @*var ctx2 = document.getElementById('StartsPerTeam').getContext('2d');
        var config2 = {
            type: 'pie',
            data: {
                datasets: [{
                    data: [],
                    backgroundColor: []
                }],
                labels: []
            },
            options: {
                responsive: false
            }
        };
        var chart2 = new Chart(ctx2, config2);

        var teams = [];
        var teamcolours = [];
        var teamsdata = [];

        @foreach (var team in Model.SeasonDriver.Select(select => select.SeasonTeam.Team).Distinct())
        {
            @:teams.push("@team.Name");
            @:teamcolours.push("@team.Colour");
            var amountStarts = Model.DriverResults.Where(d => d.SeasonDriver.SeasonTeam.Team == team).Count();
            @:teamsdata.push(@amountStarts);
        }
        var teamdatasets = [];
        teamdatasets.push(teamsdata);
        teamdatasets.push(teamcolours);
        config2.data.datasets.push(teamdatasets);
        config2.data.labels.push(teams);*@
    });
</script>