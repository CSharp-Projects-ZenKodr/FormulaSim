@model FormuleCirkelEntity.ViewModels.DriverStatsModel

@{
    ViewData["Title"] = "Driver bio";
    int dnfs = (Model.DriverResults.Where(dr => dr.Status == Status.DNF).Count());
    int dsqs = (Model.DriverResults.Where(dr => dr.Status == Status.DSQ).Count());
    int wins = (Model.DriverResults.Where(dr => dr.Position == 1).Count());
    int podiums = (Model.DriverResults.Where(dr => dr.Position == 2 || dr.Position == 3).Count());
    int points = 0;
    foreach (var season in Model.Seasons)
    {
        var current = Model.DriverResults.Where(dr => dr.SeasonDriver.SeasonId == season.SeasonId);
        var pointsMax = season.PointsPerPosition.Keys.Max();
        points += (current.Where(dr => dr.Position > 3 && dr.Position <= pointsMax).Count());
    }
    int outside = (Model.DriverResults.Where(dr => dr.Position > 12 && dr.Status == Status.Finished).Count());
    int accidents = (Model.DriverResults.Where(dr => dr.DNFCause == DNFCause.Accident || dr.DNFCause == DNFCause.Puncture).Count());
    int contact = (Model.DriverResults.Where(dr => dr.DNFCause == DNFCause.Damage || dr.DNFCause == DNFCause.Collision).Count());
    int engine = (Model.DriverResults.Where(dr => dr.DNFCause == DNFCause.Engine).Count());
    int mechanical = (Model.DriverResults.Where(dr => dr.DNFCause == DNFCause.Brakes || dr.DNFCause == DNFCause.Clutch || dr.DNFCause == DNFCause.Electrics || dr.DNFCause == DNFCause.Exhaust || dr.DNFCause == DNFCause.Hydraulics || dr.DNFCause == DNFCause.Wheel).Count());
}

<div id="graphic">
    <h1>Biography</h1>
    <h4>@Model.Driver.Name</h4>
    <hr />
    <div class="biocontainer">
        <div class="fixed">
            <dl class="inline-flex">
                <dt>
                    Starts:
                </dt>
                <dd>
                    @Model.DriverResults.Count()
                </dd>
                <dt>
                    Poles:
                </dt>
                <dd>
                    @(Model.DriverResults.Where(dr => dr.Grid == 1).Count())
                </dd>
                <dt>
                    Podiums:
                </dt>
                <dd>
                    @(Model.DriverResults.Where(dr => dr.Position <= 3).Count())
                </dd>
                <dt>
                    Wins:
                </dt>
                <dd>
                    @(Model.DriverResults.Where(dr => dr.Position == 1).Count())
                </dd>
                <dt>
                    WDCs:
                </dt>
                <dd>
                    @ViewBag.championships
                </dd>
                <dt>
                    DNFs:
                </dt>
                <dd>
                    @dnfs
                </dd>
                <dt>
                    DSQ:
                </dt>
                <dd>
                    @dsqs
                </dd>
                <dt>
                    Teams:
                </dt>
                <dd class="row">
                    @foreach (var team in Model.SeasonDriver.Select(select => select.SeasonTeam.Team).Distinct())
                    {
                        <span class='badge' style='background-color:@(team.Colour);color:@(team.Accent);font-size:1rem;'>@(team.Abbreviation)</span>
                    }
                </dd>
            </dl>
        </div>
        <div class="flex-item">
            <p id="biography" contenteditable="true">
                @if (Model.Driver.Biography == null)
                {
                    <i>This driver has no bio yet!</i>
                }
                else
                {
                    @Model.Driver.Biography
                }
            </p>
            <button id="savebio" class="btn btn-dark"><i class="far fa-save"></i></button>
        </div>
    </div>
    <div class="row">
        <canvas id="FinishPercentage" width="250" height="250"></canvas>
        <canvas id="StartsPerTeam" width="250" height="250"></canvas>
        <canvas id="NonFinishCauses" width="250" height="250"></canvas>
    </div>
</div>

<div class="row">
    <a asp-action="Index">
        <i class="fas fa-arrow-alt-circle-left fa-2x"></i>
    </a>
    <button class="btn ml-auto" onclick="takeScreenshot('#graphic', '#screenshot')"><i class="fas fa-image fa-2x"></i></button>
</div>

<div id="screenshot"></div>

<script>
    $('#savebio').click(function () {
        $.ajax({
            type: "POST",
            url: "/Drivers/SaveBiography",
            data: { id: @Model.Driver.Id, biography: $("#biography").text() },
            dataType: "html",
            success: function () { alert("Biography saved!"); },
            error: function () { alert("Saving failed."); }
        });
    });

    $(function () {
        // Piechart for the sort of finishing results
        var ctx1 = document.getElementById('FinishPercentage').getContext('2d');
        var config1 = {
            type: 'pie',
        data: {
            datasets: [{
                data: [@wins, @podiums, @points, @outside, @dnfs, @dsqs],
                backgroundColor: ['gold', 'silver', 'green', 'blue', 'red', 'black']
            }],
            labels: [
                'Wins',
                'Podiums',
                'Points',
                'Finished',
                'DNF',
                'DSQ'
            ]
            },
            options: {
                responsive: false
            }
        }
        var chart1 = new Chart(ctx1, config1);

        // Piechart for which teams the driver has started for.
        var ctx2 = document.getElementById('StartsPerTeam').getContext('2d');
        var config2 = {
            type: 'pie',
            data: {},
            options: {
                responsive: false
            }
        };
        
        var teamData = {
            datasets: [],
            labels: []
        };

        var teamDataSets = {
            data: [],
            backgroundColor: []
        };
        
        @foreach (var team in Model.SeasonDriver.Select(select => select.SeasonTeam.Team).Distinct())
        {
            @:teamData.labels.push("@team.Abbreviation");
            @:teamDataSets.backgroundColor.push("@team.Colour");
            var amountStarts = Model.DriverResults.Where(d => d.SeasonDriver.SeasonTeam.Team == team).Count();
            @:teamDataSets.data.push(@amountStarts);
        }

        teamData.datasets.push(teamDataSets);
        config2.data = teamData;
        var chart2 = new Chart(ctx2, config2);

        // Piechart to look into the sorts of DNFs / DSQs a driver has
        var ctx3 = document.getElementById('NonFinishCauses').getContext('2d');
        var config3 = {
            type: 'pie',
        data: {
            datasets: [{
                data: [@accidents, @contact, @engine, @mechanical, @dsqs],
                backgroundColor: ['purple', 'red', 'darkblue', 'grey', 'black']
            }],
            labels: [
                'Accident',
                'Contact',
                'Engine',
                'Mechanical',
                'DSQ'
            ]
            },
            options: {
                responsive: false
            }
        }
        var chart3 = new Chart(ctx3, config3);
    });
</script>