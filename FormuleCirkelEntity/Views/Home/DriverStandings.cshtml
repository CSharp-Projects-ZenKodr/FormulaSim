@model IEnumerable<FormuleCirkelEntity.Models.SeasonDriver>

@{
    ViewData["Title"] = "Standings";
    var rounds = ViewBag.rounds;
    int position = 1;
    var track = "";
    var seasonId = ViewBag.seasonId;
}

<h1>Championship drivers</h1>


<table id="graphic" class="table table-sm">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                Driver
            </th>
            <th>
                Nr.
            </th>
            <th>
                Team
            </th>
            @foreach (var round in rounds)
            {
                <th>@(track = round.Track.Location.Substring(0, 3).ToUpper())</th>
            }
            <th>
                Pnt.
            </th>
            <th>
                Avg.
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @position
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Driver.Name)
            </td>
            <td>
                <span class="badge alt-color">@Html.DisplayFor(modelItem => item.Driver.DriverNumber)</span>
            </td>
            <td>
                <span class="badge" style="background-color:@(item.SeasonTeam.Colour);color:@(item.SeasonTeam.Accent);font-size:1rem;">@item.SeasonTeam.Team.Abbreviation</span>
            </td>
            @foreach (var round in rounds)
            {
                DriverResult result = item.DriverResults.FirstOrDefault(r => r.Race.Round == round.Round);
                if (result == null || result.Position == 0)
                {
                    <td><span>-</span></td>
                }
                else
                {
                    if (result.Status == Status.DNF)
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-danger pole">DNF</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-danger">DNF</span></td>
                        }
                    }
                    else if (result.Status == Status.DSQ)
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-dsq pole">DSQ</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-dsq">DSQ</span></td>
                        }
                    }
                    else if (result.Position == 1)
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-first pole">@result.Position</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-first">@result.Position</span></td>
                        }
                    }
                    else if (result.Position == 2)
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-second pole">@result.Position</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-second">@result.Position</span></td>
                        }
                    }
                    else if (result.Position == 3)
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-third pole">@result.Position</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-third">@result.Position</span></td>
                        }
                    }
                    else if (result.Position <= ViewBag.lastpointpos)
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-success pole">@result.Position</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-success">@result.Position</span></td>
                        }
                    }
                    else
                    {
                        if (result.Grid == 1)
                        {
                            <td><span class="badge badge-primary pole">@result.Position</span></td>
                        }
                        else
                        {
                            <td><span class="badge badge-primary">@result.Position</span></td>
                        }
                    }
                }
            }
            <td>
                <span>@Html.DisplayFor(modelItem => item.Points)</span>
            </td>
            <td>
                @foreach (var avg in ViewBag.averages)
                {
                    if (avg.Driver == item)
                    {
                        <span class="badge alt-color">@avg.Averagepos</span>
                    }
                }
            </td>
        </tr>
            position++;
        }
    </tbody>
</table>

<div class="row">
    <button class="btn" onclick="takeScreenshot('#graphic', '#screenshot')"><i class="fas fa-image fa-2x"></i></button>
    <button class="btn" onclick="getStandingsGraph()"><i class="fas fa-chart-bar fa-2x ml-auto"></i></button>
</div>
<div id="screenshot"></div>

<canvas id="standingsChart"></canvas>

<script>
    var polepoint = @ViewBag.polepoint;

    function drawStandingsChart(res) {
        var ctx = document.getElementById('standingsChart');
        ctx.height = 300;
        ctx.backgroundColor = 'rgba(30, 34, 39, 0.9)';
        ctx.getContext('2d');
        var driversets = [];
        var points = @(Html.Raw(ViewBag.points));
        console.log(res);

        $(res).each(function (driverKey, driverValue) {
            var raceresults = [];
            let total = 0;

            driverValue.DriverResults.forEach(function (result) {
                if (result.Position <= @ViewBag.lastpointpos) {
                    total = total + points[result.Position];
                }
                if (result.Grid == 1) {
                    total = total + polepoint;
                }
                raceresults.push(total);
            });
            var driverDataset = {
                label: driverValue.Driver.Name,
                backgroundColor: driverValue.SeasonTeam.Accent,
                borderColor: driverValue.SeasonTeam.Colour,
                data: raceresults,
                fill: false
            };
            if (driversets.some(d => d.backgroundColor === driverValue.SeasonTeam.Accent && d.borderColor === driverValue.SeasonTeam.Colour)) {
                driverDataset.borderDash = [5, 5];
            }
            driversets.push(driverDataset);
        });

        let roundsDriven = driversets[0].data.length;
        var roundlabels = [];
        for (i = 1; i <= roundsDriven; i++) {
            var roundlabel = i;
            roundlabels.push(roundlabel);
        }

        var chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: roundlabels,
                datasets: driversets
            },
            options: {
                title: {
                    display: true,
                    text: 'WDC standings',
                    fontColor: '#e6e6e6'
                },
                tooltips: {
                    //enabled: false
                },
                hover: {
                    //mode: null
                },
                scales: {
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Rounds',
                            fontColor: '#e6e6e6'
                        },
                        ticks: {
                            fontColor: '#e6e6e6'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Points',
                            fontColor: '#e6e6e6'
                        },
                        ticks: {
                            fontColor: '#e6e6e6'
                        },
                        position: 'right'
                    }]
                },
                elements: {
                    line: {
                        tension: 0
                    }
                },
                legend: {
                    labels: {
                        boxWidth: 28,
                        fontSize: 13,
                        fontColor: '#e6e6e6'
                    }
                },
                chartCanvas: {
                    backgroundColor: 'rgba(30, 34, 39, 0.9)'
                }
            }
        });

        Chart.pluginService.register({
            beforeDraw: function (chart, easing) {
                // Makes it possible to give a backgroundcolor to the canvas
            if (chart.config.options.chartCanvas && chart.config.options.chartCanvas.backgroundColor) {
                var ctx = chart.chart.ctx;
                ctx.save();
                ctx.fillStyle = chart.config.options.chartCanvas.backgroundColor;
                ctx.fillRect(0, 0, chart.chart.width, chart.chart.height);
                ctx.restore();
            }}
        });

        let legends = chart.legend.legendItems;
            legends.forEach(function (e) {
                [e.fillStyle, e.strokeStyle] = [e.strokeStyle, e.fillStyle];
            });
    }

    function getStandingsGraph() {
        fetch("/Home/@seasonId/GetDriverGraphData", { method: "POST" })
            .then(response => response.json())
            .then(result => drawStandingsChart(result));
    }
</script>

<style>
    .badge {
        font-size: 0.85rem;
    }

    table td{
        height:60px;
    }

    .pole {
        border: 1.5px solid white;
    }
</style>